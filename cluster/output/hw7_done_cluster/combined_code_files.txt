--- BEGIN: job_hw7_all.slurm ---
#!/bin/bash
#SBATCH --job-name=hw7_all
#SBATCH --output=hw7_all_%j.out
#SBATCH --error=hw7_all_%j.err
#SBATCH --time=01:00:00       # Adjust total runtime as needed
#SBATCH --nodes=1
#SBATCH --ntasks=4
#SBATCH --mem=8GB

# -------------------------
# Module Setup
# -------------------------
# Clean the environment first.
module purge

# Load the GNU compiler module that supports C++17.
module load gnu12/12.4.0 || { echo "Failed to load gnu12/12.4.0"; exit 1; }

# Load the desired MPI module.
# Choose ONE MPI module here. In your error message you were trying to load mpich.
module load mpich/3.4.3-ucx || { echo "Failed to load mpich/3.4.3-ucx"; exit 1; }

# Print loaded modules for debugging.
module list
echo "Using GCC: $(which gcc)"
gcc --version
echo "Using MPICXX: $(which mpicxx)"
mpicxx --version

# Set OpenMP environment variable.
export OMP_NUM_THREADS=4

# -------------------------
# Compilation
# -------------------------
echo "Compiling serial version (nbody.cc)..."
g++ -O3 -std=c++17 nbody.cc -o nbody_serial || { echo "Serial compilation failed"; exit 1; }

echo "Compiling OpenMP version (nbody_omp.cc)..."
g++ -fopenmp -O3 -std=c++17 nbody_omp.cc -o nbody_omp || { echo "OpenMP compilation failed"; exit 1; }

echo "Compiling MPI version (nbody_mpi.cc)..."
mpicxx -O3 -std=c++17 nbody_mpi.cc -o nbody_mpi || { echo "MPI compilation failed"; exit 1; }

echo "Compiling Hybrid MPI+OpenMP version (nbody_mpi_omp.cc)..."
mpicxx -fopenmp -O3 -std=c++17 nbody_mpi_omp.cc -o nbody_mpi_omp || { echo "Hybrid MPI+OpenMP compilation failed"; exit 1; }

if [ -f nbody_mpi_shared.cc ]; then
  echo "Compiling Shared-Memory MPI version (nbody_mpi_shared.cc)..."
  mpicxx -O3 -std=c++17 nbody_mpi_shared.cc -o nbody_mpi_shared || echo "Shared-Memory MPI compilation failed."
fi

# -------------------------
# Execution Loop
# -------------------------
# Define an array of N values to test.
N_values=(128 256 512 1024)

for N in "${N_values[@]}"; do
  echo "-----------------------------------------------"
  echo "Running Serial version with N = $N"
  ./nbody_serial $N > serial_${N}.txt
  
  echo "Running OpenMP version with N = $N (OMP_NUM_THREADS=${OMP_NUM_THREADS})"
  ./nbody_omp $N > openmp_${N}.txt
  
  echo "Running MPI version with N = $N using 4 MPI ranks"
  mpiexec -n 4 ./nbody_mpi $N > mpi_${N}.txt
  
  echo "Running Hybrid MPI+OpenMP version with N = $N using 2 MPI ranks"
  mpiexec -n 2 ./nbody_mpi_omp $N > hybrid_${N}.txt
  
  if [ -f nbody_mpi_shared ]; then
    echo "Running Shared-Memory MPI version with N = $N using 4 MPI ranks"
    mpiexec -n 4 ./nbody_mpi_shared $N > shared_${N}.txt
  fi
done

echo "Job completed. Output files: serial_*.txt, openmp_*.txt, mpi_*.txt, hybrid_*.txt, shared_*.txt (if compiled)."

--- END: {filename} ---

--- BEGIN: nbody.cc ---
// nbody.cc
#include <iostream>
#include <fstream>
#include <random>
#include <vector>
#include <tuple>
#include <chrono>
#include <cmath>

static int N = 128;           // Number of masses
static const int D = 3;       // Dimensionality
static int ND = N * D;        // Size of state vectors
static const double G = 0.5;
static const double dt = 1e-3;
static const int T = 300;     // Number of time steps
static const double x_min = 0.0, x_max = 1.0;
static const double v_min = 0.0, v_max = 0.0;
static const double m_0 = 1.0;
static const double epsilon = 0.01;
static const double epsilon2 = epsilon * epsilon;

using Vec = std::vector<double>;
using Vecs = std::vector<Vec>;

static std::mt19937 gen(std::random_device{}());
static std::uniform_real_distribution<> ran(0.0, 1.0);

template <typename T>
void save(const std::vector<T>& vec, const std::string& filename, const std::string& header = "") {
    std::ofstream file(filename);
    if(file.is_open()){
        if(!header.empty())
            file << "# " << header << "\n";
        for(const auto &elem : vec)
            file << elem << " ";
        file << "\n";
        file.close();
    } else {
        std::cerr << "Unable to open file " << filename << "\n";
    }
}

std::tuple<Vec, Vec> initial_conditions() {
    Vec x(ND), v(ND);
    double dx = x_max - x_min, dv = v_max - v_min;
    for (int i = 0; i < ND; i++) {
        x[i] = ran(gen) * dx + x_min;
        v[i] = ran(gen) * dv + v_min;
    }
    return {x, v};
}

Vec acceleration(const Vec &x, const Vec &m) {
    Vec a(ND, 0.0);
    for (int i = 0; i < N; i++) {
        int iD = i * D;
        for (int j = 0; j < N; j++) {
            int jD = j * D;
            double dx[D], dx2 = epsilon2;
            for (int k = 0; k < D; k++) {
                dx[k] = x[jD + k] - x[iD + k];
                dx2 += dx[k] * dx[k];
            }
            double denom = dx2 * std::sqrt(dx2);
            double factor = G * m[j] / denom;
            for (int k = 0; k < D; k++) {
                a[iD + k] += factor * dx[k];
            }
        }
    }
    return a;
}

std::tuple<Vec, Vec> timestep(const Vec &x0, const Vec &v0, const Vec &m) {
    Vec a0 = acceleration(x0, m);
    Vec x1(ND), v1(ND);
    for (int i = 0; i < ND; i++) {
        v1[i] = v0[i] + a0[i] * dt;
        x1[i] = x0[i] + v1[i] * dt;
    }
    return {x1, v1};
}

int main(int argc, char** argv) {
    auto start = std::chrono::high_resolution_clock::now();
    if (argc > 1) {
        N = std::atoi(argv[1]);
        ND = N * D;
    }
    Vec t(T + 1);
    for (int i = 0; i <= T; i++) {
        t[i] = i * dt;
    }
    Vec m(N, m_0);
    Vecs x(T + 1), v(T + 1);
    std::tie(x[0], v[0]) = initial_conditions();
    for (int n = 0; n < T; n++) {
        std::tie(x[n + 1], v[n + 1]) = timestep(x[n], v[n], m);
    }
    Vec KE(T + 1, 0.0);
    for (int n = 0; n <= T; n++) {
        double KE_n = 0.0;
        for (int i = 0; i < N; i++) {
            double v2 = 0.0;
            for (int k = 0; k < D; k++) {
                v2 += v[n][i * D + k] * v[n][i * D + k];
            }
            KE_n += 0.5 * m[i] * v2;
        }
        KE[n] = KE_n;
    }
    save(KE, "KE_" + std::to_string(N) + ".txt", "Kinetic Energy");
    save(t, "time_" + std::to_string(N) + ".txt", "Time");
    std::cout << "Total Kinetic Energy (first time step): " << KE[0] << "\n";
    auto end = std::chrono::high_resolution_clock::now();
    double elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() / 1000.0;
    std::cout << "Runtime = " << elapsed << " s for N = " << N << "\n";
    return 0;
}

--- END: {filename} ---

--- BEGIN: nbody_mpi.cc ---
// nbody_mpi.cc
#include <mpi.h>
#include <iostream>
#include <fstream>
#include <random>
#include <vector>
#include <tuple>
#include <chrono>
#include <cmath>

static int N = 128;
static const int D = 3;
static int ND = N * D;
static const double G = 0.5;
static const double dt = 1e-3;
static const int T = 300;
static const double x_min = 0.0, x_max = 1.0;
static const double v_min = 0.0, v_max = 0.0;
static const double m_0 = 1.0;
static const double epsilon = 0.01;
static const double epsilon2 = epsilon * epsilon;

using Vec = std::vector<double>;
using Vecs = std::vector<Vec>;

int rank, n_ranks;
std::mt19937 gen;
std::uniform_real_distribution<> ran(0.0, 1.0);

template <typename T>
void save(const std::vector<T>& vec, const std::string& filename, const std::string& header = ""){
    if(rank==0){
        std::ofstream file(filename);
        if(file.is_open()){
            if(!header.empty())
                file << "# " << header << "\n";
            for(const auto &elem : vec)
                file << elem << " ";
            file << "\n";
            file.close();
        } else {
            std::cerr << "Unable to open file " << filename << "\n";
        }
    }
}

std::tuple<Vec, Vec> initial_conditions(){
    Vec x(ND), v(ND);
    double dx = x_max - x_min, dv = v_max - v_min;
    for(int i=0; i<ND; i++){
        x[i] = ran(gen)*dx + x_min;
        v[i] = ran(gen)*dv + v_min;
    }
    return {x, v};
}

Vec acceleration(const Vec &x, const Vec &m){
    Vec a(ND, 0.0);
    for(int i=0; i<N; i++){
        int iD = i*D;
        for(int j=0; j<N; j++){
            int jD = j*D;
            double dx[D], dx2 = epsilon2;
            for(int k=0; k<D; k++){
                dx[k] = x[jD+k] - x[iD+k];
                dx2 += dx[k]*dx[k];
            }
            double denom = dx2 * std::sqrt(dx2);
            double factor = G * m[j] / denom;
            for(int k=0; k<D; k++){
                a[iD+k] += factor * dx[k];
            }
        }
    }
    return a;
}

std::tuple<Vec, Vec> timestep(const Vec &x0, const Vec &v0, const Vec &m){
    Vec a0 = acceleration(x0, m);
    Vec x1(ND), v1(ND);
    for(int i=0; i<ND; i++){
        v1[i] = v0[i] + a0[i]*dt;
        x1[i] = x0[i] + v1[i]*dt;
    }
    return {x1, v1};
}

int main(int argc, char** argv){
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &n_ranks);
    unsigned seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
    gen.seed(seed ^ rank);
    if(argc > 1){
        N = std::atoi(argv[1]);
        ND = N * D;
    }
    Vec t(T+1);
    for(int i=0; i<=T; i++){
        t[i] = i*dt;
    }
    Vec m(N, m_0);
    Vecs x(T+1), v(T+1);
    std::tie(x[0], v[0]) = initial_conditions();
    for(int n=0; n<T; n++){
        std::tie(x[n+1], v[n+1]) = timestep(x[n], v[n], m);
    }
    Vec KE(T+1, 0.0);
    for(int n=0; n<=T; n++){
        double KE_n = 0.0;
        for(int i=0; i<N; i++){
            double v2 = 0.0;
            for(int k=0; k<D; k++){
                v2 += v[n][i*D+k]*v[n][i*D+k];
            }
            KE_n += 0.5 * m[i] * v2;
        }
        KE[n] = KE_n;
    }
    Vec global_KE(T+1, 0.0);
    MPI_Reduce(KE.data(), global_KE.data(), T+1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    if(rank==0){
        save(global_KE, "KE_MPI_" + std::to_string(N) + ".txt", "Kinetic Energy (MPI)");
        save(t, "time_MPI_" + std::to_string(N) + ".txt", "Time");
        std::cout << "Total KE (first timestep) = " << global_KE[0] << "\n";
    }
    MPI_Finalize();
    return 0;
}

--- END: {filename} ---

--- BEGIN: nbody_mpi_omp.cc ---
// nbody_mpi_omp.cc
#include <mpi.h>
#include <omp.h>
#include <iostream>
#include <fstream>
#include <random>
#include <vector>
#include <tuple>
#include <chrono>
#include <cmath>

static int N = 128;
static const int D = 3;
static int ND = N * D;
static const double G = 0.5;
static const double dt = 1e-3;
static const int T = 300;
static const double x_min = 0.0, x_max = 1.0;
static const double v_min = 0.0, v_max = 0.0;
static const double m_0 = 1.0;
static const double epsilon = 0.01;
static const double epsilon2 = epsilon * epsilon;

using Vec = std::vector<double>;
using Vecs = std::vector<Vec>;

int rank, n_ranks;
std::mt19937 gen;
std::uniform_real_distribution<> ran(0.0, 1.0);

template <typename T>
void save(const std::vector<T>& vec, const std::string& filename, const std::string& header = ""){
    if(rank == 0){
        std::ofstream file(filename);
        if(file.is_open()){
            if(!header.empty())
                file << "# " << header << "\n";
            for(const auto &elem : vec)
                file << elem << " ";
            file << "\n";
            file.close();
        } else {
            std::cerr << "Unable to open file " << filename << "\n";
        }
    }
}

std::tuple<Vec, Vec> initial_conditions(){
    Vec x(ND), v(ND);
    double dx = x_max - x_min, dv = v_max - v_min;
    #pragma omp parallel for
    for (int i = 0; i < ND; i++){
        int tid = omp_get_thread_num();
        std::mt19937 local_gen(gen());
        x[i] = ran(local_gen)*dx + x_min;
        v[i] = ran(local_gen)*dv + v_min;
    }
    return {x, v};
}

Vec acceleration(const Vec &x, const Vec &m) {
    Vec a(ND, 0.0);
    #pragma omp parallel for schedule(dynamic)
    for (int i = 0; i < N; i++){
        int iD = i * D;
        for (int j = 0; j < N; j++){
            int jD = j * D;
            double dx[D], dx2 = epsilon2;
            for (int k = 0; k < D; k++){
                dx[k] = x[jD+k] - x[iD+k];
                dx2 += dx[k]*dx[k];
            }
            double denom = dx2 * std::sqrt(dx2);
            double factor = G * m[j] / denom;
            for (int k = 0; k < D; k++){
                #pragma omp atomic
                a[iD+k] += factor * dx[k];
            }
        }
    }
    return a;
}

std::tuple<Vec, Vec> timestep(const Vec &x0, const Vec &v0, const Vec &m) {
    Vec a0 = acceleration(x0, m);
    Vec x1(ND), v1(ND);
    #pragma omp parallel for
    for (int i = 0; i < ND; i++){
        v1[i] = v0[i] + a0[i] * dt;
        x1[i] = x0[i] + v1[i] * dt;
    }
    return {x1, v1};
}

int main(int argc, char** argv){
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &n_ranks);
    unsigned seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
    gen.seed(seed ^ (rank+12345));
    if(argc > 1){
        N = std::atoi(argv[1]);
        ND = N * D;
    }
    Vec t(T+1);
    for (int i = 0; i <= T; i++){
        t[i] = i * dt;
    }
    Vec m(N, m_0);
    Vecs x(T+1), v(T+1);
    std::tie(x[0], v[0]) = initial_conditions();
    for (int n = 0; n < T; n++){
        std::tie(x[n+1], v[n+1]) = timestep(x[n], v[n], m);
    }
    Vec KE(T+1, 0.0);
    for (int n = 0; n <= T; n++){
        double KE_n = 0.0;
        for (int i = 0; i < N; i++){
            double v2 = 0.0;
            for (int k = 0; k < D; k++){
                v2 += v[n][i*D+k]*v[n][i*D+k];
            }
            KE_n += 0.5 * m[i] * v2;
        }
        KE[n] = KE_n;
    }
    Vec global_KE(T+1, 0.0);
    MPI_Reduce(KE.data(), global_KE.data(), T+1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    if(rank==0){
        save(global_KE, "KE_MPI_OMP_" + std::to_string(N) + ".txt", "Kinetic Energy (MPI+OpenMP)");
        save(t, "time_MPI_OMP_" + std::to_string(N) + ".txt", "Time");
        std::cout << "Total KE (first timestep) = " << global_KE[0] << "\n";
    }
    MPI_Finalize();
    return 0;
}

--- END: {filename} ---

--- BEGIN: nbody_mpi_shared.cc ---
// nbody_mpi_shared.cc
#include <mpi.h>
#include <iostream>
#include <fstream>
#include <random>
#include <vector>
#include <chrono>
#include <cmath>

static int N = 128;
static const int D = 3;
static int ND = N * D;
static const double G = 0.5;
static const double dt = 1e-3;
static const int T = 300;
static const double x_min = 0.0, x_max = 1.0;
static const double v_min = 0.0, v_max = 0.0;
static const double m_0 = 1.0;
static const double epsilon = 0.01;
static const double epsilon2 = epsilon * epsilon;

using Vec = std::vector<double>;

int main(int argc, char** argv){
    MPI_Init(&argc, &argv);
    int rank, n_ranks;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &n_ranks);
    if(argc > 1){
        N = std::atoi(argv[1]);
        ND = N * D;
    }
    MPI_Aint size = ND * sizeof(double);
    int disp_unit = sizeof(double);
    double *x_shared, *v_shared;
    MPI_Win win_x, win_v;
    
    // Allocate shared memory windows
    if(rank == 0){
        MPI_Win_allocate_shared(size, disp_unit, MPI_INFO_NULL, MPI_COMM_WORLD, &x_shared, &win_x);
        MPI_Win_allocate_shared(size, disp_unit, MPI_INFO_NULL, MPI_COMM_WORLD, &v_shared, &win_v);
    } else {
        MPI_Win_allocate_shared(0, disp_unit, MPI_INFO_NULL, MPI_COMM_WORLD, &x_shared, &win_x);
        MPI_Win_shared_query(win_x, 0, &size, &disp_unit, &x_shared);
        MPI_Win_allocate_shared(0, disp_unit, MPI_INFO_NULL, MPI_COMM_WORLD, &v_shared, &win_v);
        MPI_Win_shared_query(win_v, 0, &size, &disp_unit, &v_shared);
    }
    
    // Initialize shared arrays on rank 0
    if(rank == 0){
        std::mt19937 gen(std::random_device{}());
        std::uniform_real_distribution<> ran(0.0, 1.0);
        double dx = x_max - x_min, dv = v_max - v_min;
        for (int i = 0; i < ND; i++){
            x_shared[i] = ran(gen) * dx + x_min;
            v_shared[i] = ran(gen) * dv + v_min;
        }
    }
    
    MPI_Barrier(MPI_COMM_WORLD);
    
    // For demonstration, perform one timestep update on shared arrays.
    std::vector<double> local_a(ND, 0.0);
    for (int i = 0; i < N; i++){
        int iD = i * D;
        for (int j = 0; j < N; j++){
            int jD = j * D;
            double dx[D], dx2 = epsilon2;
            for (int k = 0; k < D; k++){
                dx[k] = x_shared[jD + k] - x_shared[iD + k];
                dx2 += dx[k] * dx[k];
            }
            double denom = dx2 * std::sqrt(dx2);
            double factor = G * m_0 / denom;  // masses are all m_0
            for (int k = 0; k < D; k++){
                local_a[iD+k] += factor * dx[k];
            }
        }
    }
    // Update velocities and positions
    for (int i = 0; i < ND; i++){
        v_shared[i] += local_a[i] * dt;
        x_shared[i] += v_shared[i] * dt;
    }
    MPI_Barrier(MPI_COMM_WORLD);
    if(rank == 0){
        std::cout << "Shared-memory update complete.\n";
    }
    
    MPI_Win_free(&win_x);
    MPI_Win_free(&win_v);
    
    MPI_Finalize();
    return 0;
}

--- END: {filename} ---

--- BEGIN: nbody_omp.cc ---
// nbody_omp.cc
#include <iostream>
#include <fstream>
#include <random>
#include <vector>
#include <tuple>
#include <chrono>
#include <cmath>
#include <omp.h>

static int N = 128;
static const int D = 3;
static int ND = N * D;
static const double G = 0.5;
static const double dt = 1e-3;
static const int T = 300;
static const double x_min = 0.0, x_max = 1.0;
static const double v_min = 0.0, v_max = 0.0;
static const double m_0 = 1.0;
static const double epsilon = 0.01;
static const double epsilon2 = epsilon * epsilon;

using Vec = std::vector<double>;
using Vecs = std::vector<Vec>;

static std::mt19937 gen(12345);
static std::uniform_real_distribution<> ran(0.0, 1.0);

template <typename T>
void save(const std::vector<T>& vec, const std::string& filename, const std::string& header = ""){
    std::ofstream file(filename);
    if(file.is_open()){
        if(!header.empty())
            file << "# " << header << "\n";
        for(const auto &elem : vec)
            file << elem << " ";
        file << "\n";
        file.close();
    } else {
        std::cerr << "Unable to open file " << filename << "\n";
    }
}

std::tuple<Vec, Vec> initial_conditions(){
    Vec x(ND), v(ND);
    double dx = x_max - x_min, dv = v_max - v_min;
    #pragma omp parallel for
    for (int i = 0; i < ND; i++){
        int tid = omp_get_thread_num();
        std::mt19937 local_gen(gen());
        x[i] = ran(local_gen) * dx + x_min;
        v[i] = ran(local_gen) * dv + v_min;
    }
    return {x, v};
}

Vec acceleration(const Vec &x, const Vec &m) {
    Vec a(ND, 0.0);
    #pragma omp parallel for schedule(dynamic)
    for (int i = 0; i < N; i++){
        int iD = i * D;
        for (int j = 0; j < N; j++){
            int jD = j * D;
            double dx[D], dx2 = epsilon2;
            for (int k = 0; k < D; k++){
                dx[k] = x[jD+k] - x[iD+k];
                dx2 += dx[k]*dx[k];
            }
            double denom = dx2 * std::sqrt(dx2);
            double factor = G * m[j] / denom;
            for (int k = 0; k < D; k++){
                a[iD+k] += factor * dx[k];
            }
        }
    }
    return a;
}

std::tuple<Vec, Vec> timestep(const Vec &x0, const Vec &v0, const Vec &m) {
    Vec a0 = acceleration(x0, m);
    Vec x1(ND), v1(ND);
    #pragma omp parallel for
    for (int i = 0; i < ND; i++){
        v1[i] = v0[i] + a0[i] * dt;
        x1[i] = x0[i] + v1[i] * dt;
    }
    return {x1, v1};
}

int main(int argc, char** argv){
    auto start = std::chrono::high_resolution_clock::now();
    if(argc > 1){
        N = std::atoi(argv[1]);
        ND = N * D;
    }
    Vec t(T+1);
    for(int i=0; i<=T; i++){
        t[i] = i*dt;
    }
    Vec m(N, m_0);
    Vecs x(T+1), v(T+1);
    std::tie(x[0], v[0]) = initial_conditions();
    for(int n=0; n<T; n++){
        std::tie(x[n+1], v[n+1]) = timestep(x[n], v[n], m);
    }
    Vec KE(T+1, 0.0);
    for(int n=0; n<=T; n++){
        double KE_n = 0.0;
        for(int i=0; i<N; i++){
            double v2 = 0.0;
            for(int k=0; k<D; k++){
                v2 += v[n][i*D+k]*v[n][i*D+k];
            }
            KE_n += 0.5 * m[i] * v2;
        }
        KE[n] = KE_n;
    }
    save(KE, "KE_OMP_" + std::to_string(N) + ".txt", "Kinetic Energy (OpenMP)");
    save(t, "time_OMP_" + std::to_string(N) + ".txt", "Time");
    std::cout << "Total KE = " << KE[0] << "\n";
    auto end = std::chrono::high_resolution_clock::now();
    double elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()/1000.0;
    std::cout << "Runtime = " << elapsed << " s for N = " << N << "\n";
    return 0;
}

--- END: {filename} ---

